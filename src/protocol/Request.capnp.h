// Generated by Cap'n Proto compiler, DO NOT EDIT
// source: Request.capnp

#ifndef CAPNP_INCLUDED_ecc23a6ce1dbd595_
#define CAPNP_INCLUDED_ecc23a6ce1dbd595_

#include <capnp/generated-header-support.h>

#if CAPNP_VERSION != 7000
#error "Version mismatch between generated code and library headers.  You must use the same version of the Cap'n Proto compiler and library."
#endif

#include "Bugfix.capnp.h"

namespace capnp {
namespace schemas {

CAPNP_DECLARE_SCHEMA(b5bfa4a18a307b4e);
CAPNP_DECLARE_SCHEMA(c4511264cac4e706);

}  // namespace schemas
}  // namespace capnp


struct Request {
  Request() = delete;

  class Reader;
  class Builder;
  class Pipeline;
  enum Which: uint16_t {
    LOGIN,
    BUGFIX,
  };
  struct Login;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(b5bfa4a18a307b4e, 1, 2)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct Request::Login {
  Login() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(c4511264cac4e706, 1, 2)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

// =======================================================================================

class Request::Reader {
public:
  typedef Request Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline Which which() const;
  inline bool isLogin() const;
  inline typename Login::Reader getLogin() const;

  inline bool isBugfix() const;
  inline bool hasBugfix() const;
  inline  ::Bugfix::Reader getBugfix() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class Request::Builder {
public:
  typedef Request Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline Which which();
  inline bool isLogin();
  inline typename Login::Builder getLogin();
  inline typename Login::Builder initLogin();

  inline bool isBugfix();
  inline bool hasBugfix();
  inline  ::Bugfix::Builder getBugfix();
  inline void setBugfix( ::Bugfix::Reader value);
  inline  ::Bugfix::Builder initBugfix();
  inline void adoptBugfix(::capnp::Orphan< ::Bugfix>&& value);
  inline ::capnp::Orphan< ::Bugfix> disownBugfix();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class Request::Pipeline {
public:
  typedef Request Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class Request::Login::Reader {
public:
  typedef Login Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool hasTeam() const;
  inline  ::capnp::Text::Reader getTeam() const;

  inline bool hasHash() const;
  inline  ::capnp::Text::Reader getHash() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class Request::Login::Builder {
public:
  typedef Login Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasTeam();
  inline  ::capnp::Text::Builder getTeam();
  inline void setTeam( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initTeam(unsigned int size);
  inline void adoptTeam(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownTeam();

  inline bool hasHash();
  inline  ::capnp::Text::Builder getHash();
  inline void setHash( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initHash(unsigned int size);
  inline void adoptHash(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownHash();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class Request::Login::Pipeline {
public:
  typedef Login Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

// =======================================================================================

inline  ::Request::Which Request::Reader::which() const {
  return _reader.getDataField<Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline  ::Request::Which Request::Builder::which() {
  return _builder.getDataField<Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline bool Request::Reader::isLogin() const {
  return which() == Request::LOGIN;
}
inline bool Request::Builder::isLogin() {
  return which() == Request::LOGIN;
}
inline typename Request::Login::Reader Request::Reader::getLogin() const {
  KJ_IREQUIRE((which() == Request::LOGIN),
              "Must check which() before get()ing a union member.");
  return typename Request::Login::Reader(_reader);
}
inline typename Request::Login::Builder Request::Builder::getLogin() {
  KJ_IREQUIRE((which() == Request::LOGIN),
              "Must check which() before get()ing a union member.");
  return typename Request::Login::Builder(_builder);
}
inline typename Request::Login::Builder Request::Builder::initLogin() {
  _builder.setDataField<Request::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, Request::LOGIN);
  _builder.getPointerField(::capnp::bounded<0>() * ::capnp::POINTERS).clear();
  _builder.getPointerField(::capnp::bounded<1>() * ::capnp::POINTERS).clear();
  return typename Request::Login::Builder(_builder);
}
inline bool Request::Reader::isBugfix() const {
  return which() == Request::BUGFIX;
}
inline bool Request::Builder::isBugfix() {
  return which() == Request::BUGFIX;
}
inline bool Request::Reader::hasBugfix() const {
  if (which() != Request::BUGFIX) return false;
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool Request::Builder::hasBugfix() {
  if (which() != Request::BUGFIX) return false;
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::Bugfix::Reader Request::Reader::getBugfix() const {
  KJ_IREQUIRE((which() == Request::BUGFIX),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::Bugfix>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::Bugfix::Builder Request::Builder::getBugfix() {
  KJ_IREQUIRE((which() == Request::BUGFIX),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::Bugfix>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Request::Builder::setBugfix( ::Bugfix::Reader value) {
  _builder.setDataField<Request::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, Request::BUGFIX);
  ::capnp::_::PointerHelpers< ::Bugfix>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::Bugfix::Builder Request::Builder::initBugfix() {
  _builder.setDataField<Request::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, Request::BUGFIX);
  return ::capnp::_::PointerHelpers< ::Bugfix>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Request::Builder::adoptBugfix(
    ::capnp::Orphan< ::Bugfix>&& value) {
  _builder.setDataField<Request::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, Request::BUGFIX);
  ::capnp::_::PointerHelpers< ::Bugfix>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::Bugfix> Request::Builder::disownBugfix() {
  KJ_IREQUIRE((which() == Request::BUGFIX),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::Bugfix>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool Request::Login::Reader::hasTeam() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool Request::Login::Builder::hasTeam() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader Request::Login::Reader::getTeam() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder Request::Login::Builder::getTeam() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Request::Login::Builder::setTeam( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder Request::Login::Builder::initTeam(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), size);
}
inline void Request::Login::Builder::adoptTeam(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> Request::Login::Builder::disownTeam() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool Request::Login::Reader::hasHash() const {
  return !_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline bool Request::Login::Builder::hasHash() {
  return !_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader Request::Login::Reader::getHash() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder Request::Login::Builder::getHash() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void Request::Login::Builder::setHash( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder Request::Login::Builder::initHash(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), size);
}
inline void Request::Login::Builder::adoptHash(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> Request::Login::Builder::disownHash() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}


#endif  // CAPNP_INCLUDED_ecc23a6ce1dbd595_
