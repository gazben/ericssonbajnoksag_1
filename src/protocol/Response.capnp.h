// Generated by Cap'n Proto compiler, DO NOT EDIT
// source: Response.capnp

#ifndef CAPNP_INCLUDED_c037d851bb528efa_
#define CAPNP_INCLUDED_c037d851bb528efa_

#include <capnp/generated-header-support.h>

#if CAPNP_VERSION != 7000
#error "Version mismatch between generated code and library headers.  You must use the same version of the Cap'n Proto compiler and library."
#endif

#include "Bugfix.capnp.h"

namespace capnp {
namespace schemas {

CAPNP_DECLARE_SCHEMA(ac45fd4d695dcf29);

}  // namespace schemas
}  // namespace capnp


struct Response {
  Response() = delete;

  class Reader;
  class Builder;
  class Pipeline;
  enum Which: uint16_t {
    BUGFIX,
    END,
  };

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(ac45fd4d695dcf29, 1, 2)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

// =======================================================================================

class Response::Reader {
public:
  typedef Response Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline Which which() const;
  inline bool hasStatus() const;
  inline  ::capnp::Text::Reader getStatus() const;

  inline bool isBugfix() const;
  inline bool hasBugfix() const;
  inline  ::Bugfix::Reader getBugfix() const;

  inline bool isEnd() const;
  inline bool getEnd() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class Response::Builder {
public:
  typedef Response Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline Which which();
  inline bool hasStatus();
  inline  ::capnp::Text::Builder getStatus();
  inline void setStatus( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initStatus(unsigned int size);
  inline void adoptStatus(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownStatus();

  inline bool isBugfix();
  inline bool hasBugfix();
  inline  ::Bugfix::Builder getBugfix();
  inline void setBugfix( ::Bugfix::Reader value);
  inline  ::Bugfix::Builder initBugfix();
  inline void adoptBugfix(::capnp::Orphan< ::Bugfix>&& value);
  inline ::capnp::Orphan< ::Bugfix> disownBugfix();

  inline bool isEnd();
  inline bool getEnd();
  inline void setEnd(bool value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class Response::Pipeline {
public:
  typedef Response Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

// =======================================================================================

inline  ::Response::Which Response::Reader::which() const {
  return _reader.getDataField<Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline  ::Response::Which Response::Builder::which() {
  return _builder.getDataField<Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline bool Response::Reader::hasStatus() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool Response::Builder::hasStatus() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader Response::Reader::getStatus() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder Response::Builder::getStatus() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Response::Builder::setStatus( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder Response::Builder::initStatus(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), size);
}
inline void Response::Builder::adoptStatus(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> Response::Builder::disownStatus() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool Response::Reader::isBugfix() const {
  return which() == Response::BUGFIX;
}
inline bool Response::Builder::isBugfix() {
  return which() == Response::BUGFIX;
}
inline bool Response::Reader::hasBugfix() const {
  if (which() != Response::BUGFIX) return false;
  return !_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline bool Response::Builder::hasBugfix() {
  if (which() != Response::BUGFIX) return false;
  return !_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline  ::Bugfix::Reader Response::Reader::getBugfix() const {
  KJ_IREQUIRE((which() == Response::BUGFIX),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::Bugfix>::get(_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline  ::Bugfix::Builder Response::Builder::getBugfix() {
  KJ_IREQUIRE((which() == Response::BUGFIX),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::Bugfix>::get(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void Response::Builder::setBugfix( ::Bugfix::Reader value) {
  _builder.setDataField<Response::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, Response::BUGFIX);
  ::capnp::_::PointerHelpers< ::Bugfix>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline  ::Bugfix::Builder Response::Builder::initBugfix() {
  _builder.setDataField<Response::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, Response::BUGFIX);
  return ::capnp::_::PointerHelpers< ::Bugfix>::init(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void Response::Builder::adoptBugfix(
    ::capnp::Orphan< ::Bugfix>&& value) {
  _builder.setDataField<Response::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, Response::BUGFIX);
  ::capnp::_::PointerHelpers< ::Bugfix>::adopt(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::Bugfix> Response::Builder::disownBugfix() {
  KJ_IREQUIRE((which() == Response::BUGFIX),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::Bugfix>::disown(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}

inline bool Response::Reader::isEnd() const {
  return which() == Response::END;
}
inline bool Response::Builder::isEnd() {
  return which() == Response::END;
}
inline bool Response::Reader::getEnd() const {
  KJ_IREQUIRE((which() == Response::END),
              "Must check which() before get()ing a union member.");
  return _reader.getDataField<bool>(
      ::capnp::bounded<16>() * ::capnp::ELEMENTS);
}

inline bool Response::Builder::getEnd() {
  KJ_IREQUIRE((which() == Response::END),
              "Must check which() before get()ing a union member.");
  return _builder.getDataField<bool>(
      ::capnp::bounded<16>() * ::capnp::ELEMENTS);
}
inline void Response::Builder::setEnd(bool value) {
  _builder.setDataField<Response::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, Response::END);
  _builder.setDataField<bool>(
      ::capnp::bounded<16>() * ::capnp::ELEMENTS, value);
}


#endif  // CAPNP_INCLUDED_c037d851bb528efa_
